The String pool cannot be possible.

A lot of heap space is saved by JRE. The same string variable can be referred to by more than one string variable in the pool. String interning can also not be possible if the String would not be immutable.


Serious security threat to the application.

For example, database usernames, passwords are passed as strings to receive database connections. The socket programming host and port descriptions are also passed as strings. The String is immutable, so its value cannot be changed. If the String doesn't remain immutable, any hacker can cause a security issue in the application by changing the reference value.


The String is safe for multithreading because of its immutableness.

Different threads can access a single "String instance". It removes the synchronization for thread safety because we make strings thread-safe implicitly.


Loading the correct class by Classloader. 

For example, suppose we have an instance where we try to load java.sql.Connection class but the changes in the referenced value to the myhacked.Connection class does unwanted things to our database.