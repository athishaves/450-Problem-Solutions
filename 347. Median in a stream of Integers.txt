class Solution {
    
    static PriorityQueue<Integer> q1 = new PriorityQueue<>(Collections.reverseOrder());
    static PriorityQueue<Integer> q2 = new PriorityQueue<>();
    
    public static void insertHeap(int x) {
        if (q1.size() <= q2.size()) q1.add(x);
        else q2.add(x);
        balanceHeaps();
    }
    
    //Function to balance heaps.
    public static void balanceHeaps() {
        if (q1.size() == 0 || q2.size() == 0) return;
        if (q1.peek() > q2.peek()) {
            int q1_temp = q1.poll();
            q1.add(q2.poll());
            q2.add(q1_temp);
        }
    }
    
    //Function to return Median.
    public static double getMedian() {
        if (q1.size() == q2.size()) return (double)(q1.peek() + q2.peek())/2;
        if (q1.size() > q2.size()) return q1.peek();
        return q2.peek();
    }
    
}